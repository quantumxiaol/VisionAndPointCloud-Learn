import os

def generate_config_files(pcl_x64_path, pcl_x86_path, opencv_path):
    # 检查路径是否存在
    if not os.path.exists(pcl_x64_path) or not os.path.exists(pcl_x86_path) or not os.path.exists(opencv_path):
        print("Error: One or more of the specified paths do not exist.")
        return

    # 定义配置文件模板
    config_template = """
# Visual Studio Configuration File
# Generated by auto-config.py

# Path environment variable
Path={path_env_var}

# VC++ Directories -> Include Directories
IncludeDirectories={include_directories}

# VC++ Directories -> Library Directories
LibraryDirectories={library_directories}

# Linker -> Input -> Additional Dependencies
AdditionalDependencies={dependencies}
"""

    # 定义配置文件的名称
    config_names = ["release_64", "debug_64", "release_32", "debug_32"]

    # 配置文件的数据结构
    configs = {
        "release_64": {"path_env_var": [], "include_directories": [], "library_directories": [], "dependencies": []},
        "debug_64": {"path_env_var": [], "include_directories": [], "library_directories": [], "dependencies": []},
        "release_32": {"path_env_var": [], "include_directories": [], "library_directories": [], "dependencies": []},
        "debug_32": {"path_env_var": [], "include_directories": [], "library_directories": [], "dependencies": []}
    }

    # 获取PCL和OpenCV的路径
    def get_paths(pcl_path, opencv_path, is_x64, is_release):
        # PCL路径
        if is_x64:
            pcl_lib_path = os.path.join(pcl_path, "lib")
            pcl_include_path = os.path.join(pcl_path, "include", "pcl-1.8")
        else:
            pcl_lib_path = os.path.join(pcl_path, "lib")
            pcl_include_path = os.path.join(pcl_path, "include")

        # OpenCV路径
        opencv_bin_path = os.path.join(opencv_path, "build", "x64" if is_x64 else "x86", "vc14", "bin")
        opencv_lib_path = os.path.join(opencv_path, "build", "x64" if is_x64 else "x86", "vc14", "lib")

        # 添加到配置文件数据结构
        configs[f"{'release' if is_release else 'debug'}_{64 if is_x64 else 32}"]["path_env_var"].append(opencv_bin_path)
        configs[f"{'release' if is_release else 'debug'}_{64 if is_x64 else 32}"]["include_directories"].append(pcl_include_path)
        configs[f"{'release' if is_release else 'debug'}_{64 if is_x64 else 32}"]["library_directories"].extend([pcl_lib_path, opencv_lib_path])

        # 添加PCL库文件
        for lib_file in os.listdir(pcl_lib_path):
            if lib_file.endswith(".lib"):
                configs[f"{'release' if is_release else 'debug'}_{64 if is_x64 else 32}"]["dependencies"].append(lib_file)

        # 添加OpenCV库文件
        for lib_file in os.listdir(opencv_lib_path):
            if lib_file.endswith(".lib"):
                if is_release:
                    configs[f"{'release' if is_release else 'debug'}_{64 if is_x64 else 32}"]["dependencies"].append(lib_file)
                elif lib_file.endswith("d.lib"):  # 只在debug配置中添加带有'd'后缀的文件
                    configs[f"{'release' if is_release else 'debug'}_{64 if is_x64 else 32}"]["dependencies"].append(lib_file)

    # 扫描PCL和OpenCV路径
    get_paths(pcl_x64_path, opencv_path, True, True)
    get_paths(pcl_x64_path, opencv_path, True, False)
    get_paths(pcl_x86_path, opencv_path, False, True)
    get_paths(pcl_x86_path, opencv_path, False, False)

    # 生成配置文件
    for config_name in config_names:
        with open(f"{config_name}.cfg", "w") as f:
            f.write(config_template.format(
                path_env_var=";".join(configs[config_name]["path_env_var"]),
                include_directories=";".join(configs[config_name]["include_directories"]),
                library_directories=";".join(configs[config_name]["library_directories"]),
                dependencies=" ".join(configs[config_name]["dependencies"])
            ))
        print(f"Generated {config_name}.cfg")

if __name__ == "__main__":
    pcl_x64_path = r"C:\\Program Files\\PCL 1.8.1"
    pcl_x86_path = r"C:\\Program Files (x86)\\PCL 1.8.1"
    opencv_path = r"C:\\opencv"

    # 确保路径字符串正确处理空格
    pcl_x64_path = pcl_x64_path.strip('"').strip("'")
    pcl_x86_path = pcl_x86_path.strip('"').strip("'")
    opencv_path = opencv_path.strip('"').strip("'")
    
    generate_config_files(pcl_x64_path, pcl_x86_path, opencv_path)